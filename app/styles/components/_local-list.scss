.business-list-top {
    @extend %business-list-header;
}
.yelp-courtesy {
    @include span-columns(8,12);
    margin-top: rhythm(4, 16px);
    margin-bottom: rhythm(.25, 16px);
    @include adjust-font-size-to(10px);
    color: $black;
}
.yelp-id {
    @include adjust-font-size-to(10px);
    color: $black;
}
.VBA40-yelp {
    @include span-columns(4 omega,12);
    margin-top: rhythm(2.35, 16px);
    opacity: .5;
}
.local-list {
    @extend %list;
    padding-top: rhythm(1,16px);
}
.local-list-item {
    @extend %list-item;
    padding-bottom: rhythm(.5, 16px);
    padding-top: rhythm(.5, 16px);
}
.local-list-image {
    @extend %list-image;
    height: 65px;
    width: 65px;
    margin-top: 0px;
}
.local-list-vitals {
    @extend %list-vitals;
    padding-top: 0px;
    p:first-of-type {
        margin-top: 0px;
        padding-top: 0px;
    }
}
//Courtesy of http://hugogiraudel.com/2014/02/24/star-rating-system-with-sass/
$yelp-font-size: 11px;
$star-width: $grid-padding*1.5;
$max-stars: 5;
.rating i {
  display: inline-block;
  width: 0;
  height: $star-width;
  border-width: 0 ( $star-width / 2 );
  border-style: solid;
  border-color: #eee;
  border-radius: .22em;
  color: white;
  background: #eee;
  font-style: normal;
  line-height: $star-width + 0.1em;
  text-indent: -0.46em;
  text-shadow: 1px 0 1px hsl(0, 0%, 70%);
}
// Revamping the stars-color function
// To use a list and some logic
// In order to avoid repeted code
// Also add a fallback color, just in case (#333)
@function stars-color($stars) {
  @if type-of($stars) != number {
    @warn '#{$stars} is not a number for `stars-color`.';
    @return false;
  }
  $colors: #cc8b1f #dcb228 #f0991e #f26a2c #dd050b;
  @return if($stars <= length($colors), nth($colors, $stars), #333);
}
// Main loop, looping through 1 to 4 (instead of 5)
// 1. Instanciating a list that will be used as a CSS selector
// 2. Caching the return from stars-color to speed up compilation
@for $i from 1 to $max-stars {
  $selector: (); // 1
  $color: stars-color($i); // 2
  // Inner loop not dumping anything
  // 1. Only appending stuff to $selector
  // 2. Using the [attr^='X'] selector to target both X and X.Y
  // 3. Forcing comma separated list for the selector to work
  @for $j from 1 through $i {
    $selector: append(
      $selector, // 1
      unquote("[data-rating^='#{$i}'] .star-#{$j}"), // 2
      comma // 3
    );
  }
  // Using the concatenated selector
  #{$selector} {
    border-color: $color;
    background: $color;
  }
  // For half ratings only, applying color to left border of next star
  [data-rating='#{$i + 0.5}'] .star-#{$i + 1} {
    border-left-color: $color;
  }
}
// Dealing with 5-stars rating in a very simple way
// Since there is no 5.5 rating possible
$color: stars-color($max-stars);
[data-rating='#{$max-stars}'] i {
  border-color: $color;
  background: $color;
}